Name = Rav Chadan Kumar Singh
Batch - Fw16_137
os101
Spring1-Saturday



Q1 a) What do you know about client server architecture?

===========================================================
Client-server architecture is a computing
model in which the  server hosts, delivers and
manages most ofthe resources and services to be consumed 
by the client.

 
This type of architecture has one or more client 
computers connected to a central server over a network or
internet connection. Client-server architecture 
is also known as a networking computing
model or client-server network because all the
requests and services are delivered over a
network
-------------------------------------------
A typical  data flow goes asfollows:

1. Client requests data from server

2. Load balancer routes the request to the appropriate server

3. Server processes the request client

4. Server queries appropriate database for some data

5. Database returns the queried data back to the server

6. The server processes the data and sends the data back to the client

7. This process repeat
-----------------------------------------------------------------
b.b)What is the difference between DNS and IP address?

Here, IP stands for internet protocol.
It is a protocol defined in  the TCP/IP model used
for sending the packets from source to destination.

The main task of IP is to deliver the packets
from source to the destination based on the IP 
addresses  available in the packet headers.

 IP defines the packet structure that hides the data
 which is to be delivered as well as the addressing

 method that labels the datagram with a source and destination information
========================================================================
Q2. What is CAP theorem, discuss a scenario where CAP theorem helps you
choose a technology over the other or helps you make a design decision.
Consistency
Consistency means that all clients see the same data at the same time,
 no matter which node they connect to. For this to happen, whenever 
data is written to one node, it must be instantly forwarded or 
replicated to all the other nodes in the system before the write
 is deemed ‘successful.’

Availability
Availability means that that any client making a request for data
 gets a response, even if one or more nodes are down. Another
 way to state this—all working nodes in the distributed system 
return a valid response for any request, without exception.

Partition tolerance
A partition is a communications break within a distributed 
system—a lost or temporarily delayed connection between two nodes.
 Partition tolerance means that the cluster must continue to work 
despite any number of communication breakdowns between nodes in the system.

 --------------------------------------------------------------------

Understanding the CAP theorem can help me choose the best database when 
designing a microservices-based application running from multiple locations.

 For example, if the ability to quickly iterate the data model and scale 
horizontally is essential to my application, but you can tolerate eventual 
(as opposed to strict) consistency,

 an AP database like Cassandra or Apache CouchDB can meet my requirements 
and simplify my deployment. On the other hand,

if my application depends heavily on data consistency—as in an eCommerce 
application or a payment service—you might opt for a relational database 
like PostgreSQL.
==========================================================================
Q3 What are SOLID principles? Explain with examples wherever possible.

The 5 principles of SOLID are:
1 Single-responsibility principle
2 Open-closed principle
3 Liskov substitution principle
4 Interface segregation principle
5 Dependency inversion principle
-----------------------------------------------------------------------

1 Single-responsibility principle

“a class should have only one reason to change”.

SRP makes it easy to follow another well-respected principle of
OOP, [encapsulation]

eg-
 IF NOT SRP_
public class Student {

     public void registerStudent() {
         // some logic
     }


     public void calculate_Student_Results() {
         // some logic
     }


     public void sendEmail() {
         // some logic
     }


}
 
Followed-
public class StudentRegister {
    public void registerStudent() {
        // some logic
    }
}

public class StudentResult {
    public void calculate_Student_Result() {
        // some logic
    }
}

public class StudentEmails {
    public void sendEmail() {
        // some logic
    }
}
 
--------------------------------------------------------------------
 
2 Open-closed principle
 

The open-closed principle states that software entities should be open
 for extension, but closed for modification.

This implies that such entities
 – classes, 
functions,
 and so on –

should be created in a way that their core functionalities can be extended 
to other entities without altering the initial entity's source code.

NO OCP -

public class Human  {
    
     public int height;
     public int weight;
     
}

public class CalculateBMI {

     public int CALCULATE_JOHN_BMI(Human John) {   
         
         return John.height/John.weight;
         
     }
}
public class CalculateBMI {

     public int CALCULATE_JOHN_BMI(Human John) {   
         
         return John.height/John.weight;
         
     }
     
     public int CALCULATE_JANE_BMI(Human Jane) {   
         
         return Jane.height/Jane.weight;
         
     }
}
//with OCP
public interface Entity {

     public int CalculateBMI();

}

// John entity
public class John implements Entity {

     int height;
     int weight;

     public double CalculateBMI() {

           return John.height/John.weight;
     }
}

// Jane entity
public class Jane implements Entity {

     int height;
     int weight;

     public double CalculateBMI() {

           return Jane.height/Jane.weight;
     }
}

// Dog entity
public class Dog implements Entity {

     int height;
     int weight;

     public double CalculateBMI() {

           return Dog.height/Dog.weight;
     }
}
---------------------------------------------------

 
3 Liskov substitution principle
 
“Objects in a program should be replaceable with
instances of their subtypes without altering the
correctness of that program.”

// NO LSP_

public class Amphibian {

    public void swim();
    public void walk();

}



public class Frog extends Amphibian {
    public void swim() {
        System.out.println("The frog is swimming");
    }
    
    public void walk() {
        System.out.println("The frog is walking on land");
    }
}
------------------------------------------------
 
4 Interface segregation principle
 

The interface segregation principle states that the interface
 of a program should be split in a way that the user/client
 would only have access to the necessary methods related to their needs.
//NO ISP
public interface Teacher {

    void English();

    void Biology();

    void Chemistry();
    
    void Mathematics();

}
///without ISP
public class Jane implements Teacher {

    @Override
    public void English() {
        System.out.println("Jane is teaching the students English language.");
    }

    @Override
    public void Biology() {
    }

    @Override
    public void Chemistry() {
    }

    @Override
    public void Mathematics() {
    }
}


USing ISP-
// English teacher interface

public interface EnglishTeacher extends Teacher {

    void English();

}
// Biology teacher interface

public interface BiologyTeacher extends Teacher {

    void Bilogy();

}
// Chemistry teacher interface

public interface ChemistryTeacher extends Teacher {

    void Chemistry();

}
// Mathematics teacher interface

public interface MathematicsTeacher extends Teacher {

    void Mathematics();

}

public class Jane implements EnglishTeacher {
    
    @Override
    public void Teach() {
        System.out.println("Jane has started teaching.");
    }

    @Override
    public void English() {
        System.out.println("Jane is teaching the students English language.");
    }

}
--------------------------------------------------------------
 
5 Dependency inversion principle

High-level modules should not import anything from low-level modules.
 Both should depend on abstractions

// DIP NOt followed-
public class Bank {

    public void GIVE_CUSTOMER_MONEY_OTC() {
        // some logic
    }
}
public class Customer {
    private Bank myBank = new Bank();
    
    public void withdraw() {
        myBank.GIVE_CUSTOMER_MONEY_OTC();
    }
}

//with DIP
public interface ATM {
    void ATM_OPERATION();
}

public class Bank implements ATM {
    @Override
    ATM_OPERATION(){
        // code to add money to ATM and increase the ATM balance
    }
}

public class Customer implements ATM {
    
    @Override
    ATM_OPERATION(){
        // code to withdraw money from ATM and decrease the ATM balance
    }
}
=====================================================================
Q4 A. 
Liskov Substitution Principle (LSP)

The principle says that any class must be directly
replaceable by any of its subclasses without error.

In other words, each subclass must maintain all behavior from
the base class along with any new behaviors unique to the
subclass.

 The child class must be able to process all the same
requests and complete all the same tasks as its parent class.


B.


package com.sprint1q4;

public class  Manager {
  void read();
   void write();
 
}

package com.sprint1q4;

public class RealmManager extends Manager{
	 void read() {
		System.out.println("RealmManager");
	}
	static void write() {
		System.out.println("RealmManager");
	}
}


public class DataManager  extends Manager {
	static	void read() {
		System.out.println("DataManager");
	}
	static	void write() {
		System.out.println("DataManager");
	}
}

 public DisckRealmManager extends RealmManager{
	 static void read() {
			System.out.println("DisckRealmManager");
		}
	 static	void write() {
			System.out.println("DisckRealmManager");
		}
 }

 
 InmemorialRealmManager extends RealmManager{
	 static void read() {
			System.out.println("InmemorialRealmManager");
		}
	 static void write() {
			System.out.println("InmemorialRealmManager");
		}
 }
 

 DisckCoreRealmManager extends DataManager{
	static void rea1() {
			System.out.println("DisckCoreRealmManager");
		}
 }




